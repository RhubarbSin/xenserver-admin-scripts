#!/bin/bash
#
# xs-vm-install-from-template: install a XenServer VM from a template
#
# This script allows all parameters to be specified by command-line
# options. It will prompt for necessary parameters not found on the
# command line. It assumes a network installation and does not support
# locally mounted media. If the installation repository URL is not
# specified on the command line, it will be constructed from the
# INSTALL_REPO_URL_BASE variable defined at the top of this file and
# the values of DISTRIBUTION, VERSION, and ARCHITECTURE, if possible;
# otherwise it will prompt for the URL. The script will attempt to
# determine the values for the distribution, version, and architecture
# from the template's name description if they are not specified on
# the command line; specifying them allows overriding of the values
# derived from the template. If the kickstart or preseed URL is an
# empty string, none will be used.
#
# TODO:
#   - support Debian & Ubuntu
#   - support Fedora
#   - support dynamic memory settings
#   - add option for text or VNC console
#
########################################################################
#
# get_install_repository() uses INSTALL_REPO_URL_BASE and makes
# site-specific assumptions about the installation URL's directory
# structure.
#

INSTALL_REPO_URL_BASE="http://10.1.0.1"

########################################################################
#
# Functions called from parse_arguments()
#

function usage() {
    cat <<EOF
Usage: ${0##*/} [OPTION] [...]

-l    VM NAME LABEL
-c    NUMBER OF VCPUS
-m    MEMORY SIZE in MB
-h    DISK SIZE in GB
-s    STORAGE REPOSITORY NAME LABEL or UUID
-n    NETWORK NAME LABEL or UUID
-p    MAC ADDRESS (00:16:3e:xx:xx:xx)
-t    TEMPLATE NAME LABEL or UUID
-d    DISTRIBUTION (CentOS, Ubuntu, Debian)
-v    VERSION
-a    ARCHITECTURE (i386, x86_64)
-i    INSTALLATION REPOSITORY URL
-k    KICKSTART FILE URL
-r    PRESEED FILE URL
-o    LOG FILE LOCATION
EOF
    exit 2
}

########################################################################
#
# Functions called from get_all_parameters()
#

function get_vm_name_label() {
    while [ -z "$VM_NAME_LABEL" ]; do
        echo -e "\nEnter VM name: \c"
        read VM_NAME_LABEL
    done
    # convert spaces to dashes
    VM_NAME_LABEL=$(echo "$VM_NAME_LABEL" | sed -e 's/ /-/g')
}

function get_vcpus() {
    while ! valid_integer "$VCPUS"; do
        echo -e "\nEnter number of virtual CPUs [1]: \c"
        read VCPUS
        VCPUS=${VCPUS:-1}
    done
}

function get_memory_size() {
    while ! valid_integer "$MEMORY_SIZE"; do
        echo -e "\nEnter memory size in MB [1024]: \c"
        read MEMORY_SIZE
        MEMORY_SIZE=${MEMORY_SIZE:-1024}
    done
}

function get_disk_size() {
    while ! valid_integer "$DISK_SIZE"; do
        echo -e "\nEnter disk size in GB [5]: \c"
        read DISK_SIZE
        DISK_SIZE=${DISK_SIZE:-5}
    done
}

function get_sr_uuid() {
    if [ -n "$1" ]; then
        if valid_uuid "$1"; then
            local XE_OUT=$(xe sr-list params=name-label uuid="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                SR_UUID="$1"
                SR_NAME_LABEL="$XE_OUT"
            fi
        else
            local XE_OUT=$(xe sr-list params=uuid name-label="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                SR_NAME_LABEL="$1"
                SR_UUID="$XE_OUT"
            fi
        fi
        if [ -n "$SR_UUID" ]; then
            return
        else
            echo -e "\nStorage repository not found."
        fi
    fi

    echo
    local UUIDS=$(xe sr-list content-type=user params=uuid --minimal | sed -e 's/,/ /g')
    local ID UUID NAME_LABEL HOST IDX=0
    for ID in $UUIDS; do
        UUID[$IDX]=$ID
        NAME_LABEL[$IDX]=$(xe sr-list params=name-label uuid=$ID --minimal)
        HOST[$IDX]=$(xe sr-list params=host uuid=$ID --minimal)
        echo "${IDX}) ${NAME_LABEL[$IDX]} on ${HOST[$IDX]}"
        (( IDX++ ))
    done
    echo -e "\nChoose storage repository by number: \c"
    local NUM
    read NUM
    SR_UUID=${UUID[$NUM]}
    SR_NAME_LABEL=${NAME_LABEL[$NUM]}
    SR_HOST=${HOST[$NUM]}
}

function get_network_uuid() {
    if [ -n "$1" ]; then
        if valid_uuid "$1"; then
            local XE_OUT=$(xe network-list params=name-label uuid="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                NETWORK_UUID="$1"
                NETWORK_NAME_LABEL="$XE_OUT"
            fi
        else
            local XE_OUT=$(xe network-list params=uuid name-label="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                NETWORK_NAME_LABEL="$1"
                NETWORK_UUID="$XE_OUT"
            fi
        fi
        if [ -n "$NETWORK_UUID" ]; then
            return
        else
            echo -e "\nNetwork not found."
        fi
    fi

    echo
    local UUIDS=$(xe network-list params=uuid --minimal | sed -e 's/,/ /g')
    local NAME_LABEL
    local IDX=0
    for ID in $UUIDS; do
        UUID[$IDX]=$ID
        NAME_LABEL[$IDX]=$(xe network-list params=name-label uuid=$ID --minimal)
        echo "${IDX}) ${NAME_LABEL[$IDX]}"
        (( IDX++ ))
    done
    echo -e "\nChoose network by number: \c"
    local NUM
    read NUM
    NETWORK_UUID=${UUID[$NUM]}
    NETWORK_NAME_LABEL=${NAME_LABEL[$NUM]}
}

function get_template_uuid() {
    if [ -n "$1" ]; then
        if valid_uuid "$1"; then
            local XE_OUT=$(xe template-list params=name-label uuid="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                TEMPLATE_UUID="$1"
                TEMPLATE_NAME_LABEL="$XE_OUT"
            fi
        else
            local XE_OUT=$(xe template-list params=uuid name-label="$1" --minimal)
            if [ -n "$XE_OUT" ]; then
                TEMPLATE_NAME_LABEL="$1"
                TEMPLATE_UUID="$XE_OUT"
            fi
        fi
        if [ -n "$TEMPLATE_UUID" ]; then
            return
        else
            echo -e "\nTemplate not found."
        fi
    fi

    echo
    local UUIDS=$(xe template-list params=uuid is-a-template=true --minimal | sed -e 's/,/ /g')
    local NAME_LABEL
    local IDX=0
    for ID in $UUIDS; do
        UUID[$IDX]=$ID
        NAME_LABEL[$IDX]=$(xe template-list params=name-label uuid=$ID --minimal)
        echo "${IDX}) ${NAME_LABEL[$IDX]}"
        (( IDX++ ))
    done
    echo -e "\nChoose template by number: \c"
    local NUM
    read NUM
    TEMPLATE_UUID=${UUID[$NUM]}
    TEMPLATE_NAME_LABEL=${NAME_LABEL[$NUM]}
}

function get_distribution() {
    echo
    local DISTS=( CentOS Ubuntu Debian )
    # try to guess name of distribution
    for DISTRIBUTION in ${DISTS[*]}; do
        if echo $TEMPLATE_NAME_LABEL | grep -qi $DISTRIBUTION; then
            # accept current value of DISTRIBUTION
            echo "This template appears to be for $DISTRIBUTION."
            return
        fi
    done
    # failed to guess; prompt for DISTRIBUTION
    local IDX=0
    for DIST in ${DISTS[*]}; do
        echo "${IDX}) $DIST"
        (( IDX++ ))
    done
    echo -e "\nChoose distribution by number: \c"
    local NUM
    read NUM
    DISTRIBUTION=${DISTS[$NUM]}
}

function get_version() {
    echo
    # try to guess version number
    VERSION=$(echo $TEMPLATE_NAME_LABEL | sed -e 's/^.* \([0-9\.]*\) .*$/\1/' | cut -f1 -d.)
    if [ -n "$VERSION" ]; then
        # accept current value of VERSION
        echo "This template appears to be for $DISTRIBUTION $VERSION."
    else
        echo -e "\nEnter version: \c"
        read VERSION
        if [ $DISTRIBUTION == "CentOS" ]; then
            VERSION=$(echo $VERSION | sed -e 's/\..*//g')
        fi
    fi
}

function get_architecture() {
    echo
    # try to guess architecture
    CPU_ARCH=$(echo $TEMPLATE_NAME_LABEL | sed -e '/32\|64/!d; s/^.*\(32\|64\)-bit.*$/\1/')
    if [ -n "$CPU_ARCH" ]; then
        echo "This template appears to be for a ${CPU_ARCH}-bit installation."
    else
        echo -e "\n1) 32-bit"
        echo "2) 64-bit"
        echo -e "\nChoose architecture by number: \c"
        local NUM
        read NUM
        if [ $NUM -eq 1 ]; then
            CPU_ARCH=32
        elif [ $NUM -eq 2 ]; then
            CPU_ARCH=64
        else
            CPU_ARCH=""
        fi
    fi
    # set ARCHITECTURE based on CPU_ARCH
    if [ "$CPU_ARCH" -eq 32 ]; then
        ARCHITECTURE="i386"
    elif [ $DISTRIBUTION == "CentOS" ]; then
        ARCHITECTURE="x86_64"
    else
        ARCHITECTURE="AMD64"
    fi
}

function get_install_repository() {
    if [ -z "$INSTALL_REPO_URL_BASE" ]; then
        echo -e "\nINSTALL_REPO_URL_BASE must be defined in ${0##*/}."
        exit 1
    fi
    if [ $DISTRIBUTION == "CentOS" ]; then
        INSTALL_REPO_URL="$INSTALL_REPO_URL_BASE/$DISTRIBUTION/$VERSION/os/$ARCHITECTURE"
    elif [ $DISTRIBUTION == "Ubuntu" -o $DISTRIBUTION == "Debian" ]; then
        INSTALL_REPO_URL="$INSTALL_REPO_URL_BASE/$(echo $DISTRIBUTION | tr 'A-Z' 'a-z')"
    else
        echo -e "\nEnter URL of installation repository: \c"
        read INSTALL_REPO_URL
    fi
}

function get_kickstart_url() {
    [ -n "$KICKSTART_URL" ] && return
    echo -e "\nEnter URL of kickstart file (empty if none): \c"
    read KICKSTART_URL
}

function get_preseed_url() {
    [ -n "$PRESEED_URL" ] && return
    echo -e "\nEnter URL of preseed file (empty if none): \c"
    read PRESEED_URL
}

function get_pv_args() {
    case $DISTRIBUTION in
        CentOS)
            if [ -n "$KICKSTART_URL" ]; then
                PV_ARGS="ks=$KICKSTART_URL ksdevice=bootif"
            fi
            ;;
        Ubuntu|Debian)
            if [ -n "$PRESEED_URL" ]; then
                PV_ARGS="ip=dhcp url=$PRESEED_URL auto=true hostname=localhost"
            fi
            ;;
        *)
            echo "$DISTRIBUTION is not supported."
            exit 1
    esac
}

function get_log_commands() {
    [ -n "$LOG" ] && return
    LOG="$VM_NAME_LABEL.log"
    echo
    if prompt "Log xe commands to $LOG"; then
        echo "Logging commands to $LOG."
        [ -e "$LOG" ] && rm -i "$LOG"
    else
        LOG=""
    fi
}

########################################################################
#
# Functions called from perform_installation()
#

function install_from_template() {
    echo -e "Installing from template...\c"
    CMD="xe vm-install template-uuid=$TEMPLATE_UUID sr-uuid=$SR_UUID new-name-label=$VM_NAME_LABEL"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    VM_UUID=$($CMD)
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
    echo "VM UUID: $VM_UUID"
}

function set_vcpus() {
    echo -e "Setting VCPUs...\c"
    CMD="xe vm-param-set uuid=$VM_UUID VCPUs-max=$VCPUS VCPUs-at-startup=$VCPUS"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    eval "$CMD"
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
}
function set_memory_limits() {
    echo -e "Setting memory limits...\c"
    CMD="xe vm-memory-limits-set uuid=$VM_UUID static-min=${MEMORY_SIZE}MiB static-max=${MEMORY_SIZE}MiB dynamic-min=${MEMORY_SIZE}MiB dynamic-max=${MEMORY_SIZE}MiB"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    eval "$CMD"
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
}

function destroy_vdi() {
    CMD="xe vbd-list vm-uuid=$VM_UUID params=vdi-uuid --minimal"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    VDI_UUIDS=( $($CMD | sed -e 's/,/ /g') )

    for VDI_UUID in ${VDI_UUIDS[*]}; do
        echo -e "Destroying virtual disk image...\c"

        CMD="xe vdi-destroy uuid=$VDI_UUID"
        [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
        eval "$CMD"
        if [ $? -ne 0 ]; then
            exit $?
        fi
        echo "done."
    done
}

function create_vdi() {
    echo -e "Creating virtual disk image...\c"
    CMD="xe vdi-create sr-uuid=$SR_UUID type=system virtual-size=${DISK_SIZE}GiB name-label=$VM_NAME_LABEL"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    VDI_UUID=$($CMD)
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
    echo "VDI UUID: $VDI_UUID"
}

function create_vbd() {
    echo -e "Creating virtual block device...\c"
    CMD="xe vbd-create vdi-uuid=$VDI_UUID vm-uuid=$VM_UUID bootable=true device=0"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    VBD_UUID=$($CMD)
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
    echo "VBD UUID: $VBD_UUID"
}

function create_vif() {
    echo -e "Creating virtual interface...\c"
    CMD="xe vif-create vm-uuid=$VM_UUID network-uuid=$NETWORK_UUID mac=${MAC:-random} device=0"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    VIF_UUID=$($CMD)
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
    echo "VIF UUID: $VIF_UUID"
}

function set_install_repository() {
    echo -e "Setting installation repository...\c"
    CMD="xe vm-param-add uuid=$VM_UUID param-name=other-config install-repository=$INSTALL_REPO_URL"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    eval "$CMD"
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
}

function set_boot_params() {
    echo -e "Setting boot parameters...\c"
    CMD="xe vm-param-set uuid=$VM_UUID PV-args=\"$PV_ARGS\" HVM-boot-params:order=ndc platform:viridian=false"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    eval "$CMD"
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
}

########################################################################
#
# Functions called from connect_to_console()
#

function get_domain_id() {
    CMD="xe vm-list params=dom-id uuid=$VM_UUID --minimal"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    DOM_ID=$($CMD)
    [ -z "$DOM_ID" ] && exit 1
    echo "Domain ID: $DOM_ID"
}

########################################################################
#
# Functions called from main()
#

function parse_arguments() {
    while getopts "l:c:m:h:s:n:p:t:d:v:a:i:k:r:o:" OPT "$@"; do
        case $OPT in
            l)
                VM_NAME_LABEL="$OPTARG"
                ;;
            c)
                VCPUS="$OPTARG"
                ;;
            m)
                MEMORY_SIZE="$OPTARG"
                if ! valid_integer "$MEMORY_SIZE"; then
                    echo -e "Memory size must be an integer."
                    exit 1
                fi
                ;;
            h)
                DISK_SIZE="$OPTARG"
                if ! valid_integer "$DISK_SIZE"; then
                    echo -e "Disk size must be an integer."
                    exit 1
                fi
                ;;
            s)
                SR="$OPTARG"
                ;;
            n)
                NETWORK="$OPTARG"
                ;;
            p)
                MAC="$OPTARG"
                if ! valid_mac_address "$MAC"; then
                    echo -e "Invalid MAC address."
                    exit 1
                fi
                ;;
            t)
                TEMPLATE="$OPTARG"
                ;;
            d)
                DISTRIBUTION="$OPTARG"
                ;;
            v)
                VERSION="$OPTARG"
                ;;
            a)
                ARCHITECTURE="$OPTARG"
                ;;
            i)
                INSTALL_REPO_URL="$OPTARG"
                ;;
            k)
                KICKSTART_URL="$OPTARG"
                ;;
            r)
                PRESEED_URL="$OPTARG"
                ;;
            o)
                LOG="$OPTARG"
                ;;
            *)
               usage
        esac
    done
}

function get_all_parameters() {
    get_vm_name_label
    get_vcpus
    get_memory_size
    get_disk_size
    get_sr_uuid "$SR"
    get_network_uuid "$NETWORK"
    get_template_uuid "$TEMPLATE"
    get_distribution
    get_version
    get_architecture
    get_install_repository
    if [ "$DISTRIBUTION" == "CentOS" ]; then
        get_kickstart_url
    else
        get_preseed_url
    fi
    get_pv_args
    get_log_commands
}

function display_and_confirm() {
    cat <<EOF

VM name label: $VM_NAME_LABEL
Virtual CPUs: $VCPUS
Memory size: $MEMORY_SIZE MB
Disk size: $DISK_SIZE GB
Storage repository name label: $SR_NAME_LABEL
Storage repository host: $SR_HOST
Storage repository UUID: $SR_UUID
Network name label: $NETWORK_NAME_LABEL
Network UUID: $NETWORK_UUID
Template name label: $TEMPLATE_NAME_LABEL
Template UUID: $TEMPLATE_UUID
Distribution: $DISTRIBUTION
Version: $VERSION
Architecture: $ARCHITECTURE
Installation repository URL: $INSTALL_REPO_URL
PV args: $PV_ARGS

EOF

    if prompt "Immediately start VM for installation"; then
        START_NOW=1
    else
        START_NOW=0
    fi

    echo
    if ! prompt "Continue"; then
        echo "Quitting"
        exit 0
    fi
}

function perform_installation() {
    install_from_template
    set_vcpus
    set_memory_limits
    destroy_vdi
    create_vdi
    create_vbd
    create_vif
    set_install_repository
    set_boot_params
}

function start_vm() {
    echo -e "Starting VM...\c"
    CMD="xe vm-start uuid=$VM_UUID"
    [ -n "$LOG" ] && echo "$CMD" >> "$LOG"
    eval "$CMD"
    if [ $? -ne 0 ]; then
        exit $?
    fi
    echo "done."
}

function connect_to_console() {
    get_domain_id
    echo -e "\nConnect to VM console [y/N]? \c"
    read CONT
    if echo "$CONT" | egrep -q '^[Yy]'; then
        echo "Connecting to console of domain ID $DOM_ID..."
        xl console $DOM_ID
        # alternative to xl
        # /usr/lib/xen/bin/xenconsole $DOM_ID
    fi
}

function show_command_line() {
    # show command to recreate this VM
    echo -e "\nThe following command can be used to recreate this VM:\n"
    echo -e "$0 -l $VM_NAME_LABEL -c $VCPUS -m $MEMORY_SIZE -h $DISK_SIZE -s "$SR_UUID" -n "$NETWORK_UUID"\c"
    [ -n "$MAC" ] && echo -e " -p $MAC\c"
    echo -e " -t "$TEMPLATE_UUID" -d $DISTRIBUTION -v $VERSION -a $ARCHITECTURE -i $INSTALL_REPO_URL\c"
    [ -n "$KICKSTART_URL" ] && echo -e " -k $KICKSTART_URL"
    [ -n "$LOG" ] && echo -e " -o $LOG\c"
    echo
}

########################################################################
#
# Main control sequence
#

function main() {
    # source the common functions
    MYDIR=$(dirname $0)
    XS_FUNCTIONS="$MYDIR/xs-functions"
    if ! . "$XS_FUNCTIONS"; then
        echo "Error while sourcing $XS_FUNCTIONS."
        exit 1
    fi

    parse_arguments "$@"
    get_all_parameters
    display_and_confirm
    perform_installation
    if (( START_NOW )); then
        start_vm
        connect_to_console
    fi
    show_command_line
}

########################################################################

main "$@"
