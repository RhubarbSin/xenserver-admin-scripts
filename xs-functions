# -*- mode: shell-script -*-
#
# xs-functions: common functions for xs-* scripts
#

# functions defined here will not emit messages (other than those
# emanating from xe invocations) if global QUIET is non-zero
QUIET=0

if ! which xe > /dev/null 2>&1; then
    echo "xe is not in your shell's path."
    exit 1
fi
[ -z "$XE_EXTRA_ARGS" ] && export XE_EXTRA_ARGS="server=${XE_SERVER=127.0.0.1},port=${XE_PORT=443},username=${XE_USERNAME=root},password=${XE_PASSWORD=root!!!}"

########################################################################
# 
# Functions for XenServer object queries
#

# get array of UUIDs from name label; set global UUIDS
function uuids() {
    [ $# -ne 2 ] && return 1
    UUIDS=""
    local XE_OUT=$(xe "$1"-list name-label="$2" --minimal)
    local OBJECT="$1"
    for TYPE in vm vif vbd vdi sr pbd pif; do
        [ "$1" == "$TYPE" ] && local OBJECT=$(echo "$1" | tr a-z A-Z) && break
    done
    if [ -z "$XE_OUT" ]; then
        (( QUIET )) || echo "$OBJECT not found"
        return 1
    elif [[ "$XE_OUT" =~ , ]]; then
        UUIDS=( $(echo "$XE_OUT" | sed -e 's/,/ /g') )
        (( QUIET )) || echo "Multiple ${OBJECT}s found"
        return 2
    else
        UUIDS=( "$XE_OUT" )
        return 0
    fi
}

# get VM UUID or array of VM UUIDs from VM name label; set globals
# VM_UUID and VM_UUIDs
function vm_uuid() {
    [ -z "$1" ] && return 1
    VM_UUID=""
    VM_UUIDS=""
    local UUID=$(xe vm-list name-label="$1" --minimal)
    if [ -z "$UUID" ]; then
        (( QUIET )) || echo "VM not found"
        return 1
    elif [[ "$UUID" =~ , ]]; then
        VM_UUIDS=( $(echo "$UUID" | sed -e 's/,/ /g') )
        (( QUIET )) || echo "Multiple VMs found"
        return 2
    else
        VM_UUID="$UUID"
        return 0
    fi
}

# get network UUID or array of network UUIDs from network name label;
# set globals NETWORK_UUID and NETWORK_UUIDs
function network_uuid() {
    [ -z "$1" ] && return 1
    NETWORK_UUID=""
    NETWORK_UUIDS=""
    local UUID=$(xe network-list name-label="$1" --minimal)
    if [ -z "$UUID" ]; then
        (( QUIET )) || echo "network not found"
        return 1
    elif [[ "$UUID" =~ , ]]; then
        NETWORK_UUIDS=( $(echo "$UUID" | sed -e 's/,/ /g') )
        (( QUIET )) || echo "Multiple networks found"
        return 2
    else
        NETWORK_UUID="$UUID"
        return 0
    fi
}

# get template UUID or array of template UUIDs from template name label;
# set globals TEMPLATE_UUID and TEMPLATE_UUIDs
function template_uuid() {
    [ -z "$1" ] && return 1
    TEMPLATE_UUID=""
    TEMPLATE_UUIDS=""
    local UUID=$(xe template-list name-label="$1" --minimal)
    if [ -z "$UUID" ]; then
        (( QUIET )) || echo "template not found"
        return 1
    elif [[ "$UUID" =~ , ]]; then
        TEMPLATE_UUIDS=( $(echo "$UUID" | sed -e 's/,/ /g') )
        (( QUIET )) || echo "Multiple templates found"
        return 2
    else
        TEMPLATE_UUID="$UUID"
        return 0
    fi
}

# get PIF UUID from device name (optional VLAN arg); set global
# PIF_UUID
function pif_uuid() {
    [ -z "$1" ] && return 1
    local PIF="$1"
    local VLAN=-1
    [ -n "$2" ] && VLAN="$2"
    PIF_UUID=$(xe pif-list device="$PIF" VLAN="$VLAN" --minimal)
    if [ -z "$UUID" ]; then
        (( QUIET )) || echo "PIF not found"
        return 1
    else
        return 0
    fi
}

# get value of param name from UUID; set global PARAM_VALUE
function param() {
    [ $# -ne 3 ] && return 1
    PARAM_VALUE=$(xe "$1"-param-get uuid="$2" param-name="$3" --minimal)
    return $?
}

# get array of VIF UUIDs from VM UUID; set global VIF_UUIDS
function vm_vif_uuids() {
    [ -z "$1" ] && return 1
    VIF_UUIDS=( $(xe vif-list vm-uuid="$1" --minimal | sed -e 's/,/ /g') )
    return $?
}

# get array of VBD UUIDs from VM UUID; set global VBD_UUIDS
function vm_vbd_uuids() {
    [ -z "$1" ] && return 1
    VBD_UUIDS=( $(xe vbd-list vm-uuid="$1" --minimal | sed -e 's/,/ /g') )
    return $?
}

# get network UUID from VIF UUID; set global NETWORK_UUID
function vif_network_uuid() {
    [ -z "$1" ] && return 1
    NETWORK_UUID=$(xe vif-param-get param-name=network-uuid uuid="$1")
    return $?
}

# get VDI UUID from VBD UUID; set global VDI_UUID
function vbd_vdi_uuid() {
    [ -z "$1" ] && return 1
    VDI_UUID=$(xe vbd-param-get param-name=vdi-uuid uuid="$1")
    return $?
}

# get VIF device from VIF UUID; set global VIF_DEVICE
function vif_device() {
    [ -z "$1" ] && return 1
    VIF_DEVICE=$(xe vif-param-get param-name=device uuid="$1")
    return $?
}

# get PIF VLAN from network UUID; set global PIF_VLAN
function network_pif_vlan() {
    [ -z "$1" ] && return 1
    PIF_VLAN=$(xe pif-list params=VLAN network-uuid="$1" --minimal)
    return $?
}

# get host name label from host UUID; set global HOST_NAME_LABEL
function host_name() {
    [ -z "$1" ] && return 1
    HOST_NAME_LABEL=$(xe host-param-get param-name=name-label uuid="$1")
    return $?
}

# get name label of host running VM or preferred host for VM or host
# housing VM's primary VDI (assumed to be hda for HVM and xvda for
# PV); include type of association (resident, affinity, SR) if a
# second argument is passed; XXX NEEDS WORK
function vm_host() {
    [ -z "$1" ] && return 1
    if [ -n "$2" ]; then
        local ASSOC=1
    else
        local ASSOC=0
    fi
    VM_HOST=""
    local VM_ASSOC PARAM_VALUE
    # check for residency
    param "vm" "$VM_UUID" "resident-on"
    if [ "$PARAM_VALUE" != "<not in database>" ]; then
        host_name "$PARAM_VALUE"
        VM_HOST="$HOST_NAME_LABEL"
        (( ASSOC )) && VM_ASSOC=( "resident" )
    fi
    # check for affinity
    if vm_param "$VM_UUID" "affinity" && \
        [ "$PARAM_VALUE" != "<not in database>" ]; then
        if [ -z "$VM_HOST" ]; then
            host_name "$PARAM_VALUE"
            VM_HOST="$HOST_NAME_LABEL"
        fi
        (( ASSOC )) && VM_ASSOC=( ${VM_ASSOC[*]} "affinity" )
    fi
    # check for local SR
    local VDI_UUID=$(xe vbd-list params=vdi-uuid device=xvda vm-uuid="$VM_UUID" --minimal)
    [ -z "$VDI_UUID" ] && VDI_UUID=$(xe vbd-list params=vdi-uuid device=hda vm-uuid="$VM_UUID" --minimal)
    if [ -n "$VDI_UUID" ]; then 
        local SR_UUID=$(xe vdi-list params=sr-uuid uuid=$VDI_UUID --minimal)
        local SR_HOST=$(xe sr-list params=host uuid="$SR_UUID" --minimal)
        if [ "$SR_HOST" != "<shared>" ]; then 
            [ -z "$VM_HOST" ] && VM_HOST="$SR_HOST"
            (( ASSOC )) && VM_ASSOC=( ${VM_ASSOC[*]} "SR" )
        fi
    fi

    if [ -n "$VM_HOST" ]; then
        (( ASSOC )) && VM_HOST="$VM_HOST ($(echo ${VM_ASSOC[*]} | sed 's/ /, /g'))"
        return 0
    else
        return 1
    fi
}

########################################################################
# 
# Functions for input validation
#

function valid_uuid() {
    [ -z "$1" ] && return 1
    echo "$1" | egrep -q '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'
}

function valid_integer() {
    [ -z "$1" ] && return 1
    echo "$1" | egrep -q '^[0-9]*$'
}

function valid_mac_address() {
    [ -z "$1" ] && return 1
    echo "$1" | egrep -q '([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}'
}

########################################################################
#
# Other functions
#

function prompt() {
    echo -e "$1 [y/N]? \c"
    local RESPONSE="n"
    read RESPONSE
    if echo "$RESPONSE" | egrep -q '^[Yy]'; then
        return 0
    else
        return 1
    fi
}

# check for non-empty variables named by arguments
function have_required() {
    [ -z "$1" ] && return 1
    for VAR_NAME in $*; do
        [ -z "${!VAR_NAME}" ] && return 1
    done
    return 0
}
