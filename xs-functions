# -*- mode: shell-script -*-
#
# xs-functions: common functions for xs-* scripts
#

# functions defined here will not emit messages (other than those
# emanating from xe invocations) if global variable QUIET is non-zero
QUIET=0

if ! which xe > /dev/null 2>&1; then
    echo "xe is not in your shell's path."
    exit 1
fi

# connection information for pool master
XE_SERVER="${XE_SERVER=127.0.0.1}"
XE_PORT="${XE_PORT=443}"
XE_USERNAME="${XE_USERNAME=root}"
XE_PASSWORD="${XE_PASSWORD=root!!!}"
[ -z "$XE_EXTRA_ARGS" ] && export XE_EXTRA_ARGS="server=$XE_SERVER,port=$XE_PORT,username=$XE_USERNAME,password=$XE_PASSWORD"

########################################################################
# 
# Functions for XenServer object commands
#

# get array of UUIDs from name label; set global variable UUIDS
# $1: object type
# $2: name label (may be empty string)
# $...: parameter name/value pairs (optional)
function get_uuids() {
    [ $# -lt 2 ] || [ $(( $# % 2 )) -ne 0 ] && return 2
    UUIDS=()
    local OBJECT="$1" NAME_LABEL="$2"
    shift 2
    local CMD="xe $OBJECT-list"
    [ -n "$NAME_LABEL" ] && CMD="$CMD name-label=\"$NAME_LABEL\""
    local PARAM_NAME PARAM_VALUE
    while [ -n "$1" ]; do
        PARAM_NAME="$1"
        shift
        PARAM_VALUE="$1"
        shift
        CMD="$CMD $PARAM_NAME=\"$PARAM_VALUE\""
    done
    CMD="$CMD --minimal"
    local XE_OUT=$(eval "$CMD")
    if [ -z "$XE_OUT" ]; then
        return 1
    elif [[ "$XE_OUT" =~ , ]]; then
        UUIDS=( ${XE_OUT//,/ } )
        return 3
    else
        UUIDS=( "$XE_OUT" )
        return 0
    fi
}

function get_uuid() {
    [ $# -lt 2 ] && return 2
    UUID=""
    get_uuids "$@"
    case $? in
        0)
            UUID="${UUIDS[0]}"
            return 0
            ;;
        3)
            if ! (( QUIET )); then
                local LABEL=$(object_label "$1") || return 1
                echo "Multiple ${LABEL}s found"
            fi
            return 1
            ;;
        *)
            return $?
    esac
}

# get value of param name from UUID
# $1: object type
# $2: object UUID
# $3: name of parameter
function get_param() {
    [ $# -ne 3 ] && return 2
    echo "$(xe "$1"-param-get uuid="$2" param-name="$3")"
    return $?
}

# get name label of host running VM or preferred host for VM or host
# housing VM's primary VDI (assumed to be hda for HVM and xvda for
# PV); include type of association (resident, affinity, SR) if a
# second argument is passed
function vm_host() {
    [ -z "$1" ] && return 2
    [ $# -gt 2 ] && return 2
    local VM_UUID="$1"
    if [ -n "$2" ]; then
        local ASSOC=1
    else
        local ASSOC=0
    fi
    VM_HOST=""
    local VM_ASSOC PARAM_VALUE
    # check for residency
    local RESIDENT_ON_UUID=$(get_param vm "$VM_UUID" resident-on)
    if [ "$RESIDENT_ON_UUID" != "<not in database>"  ] && \
        VM_HOST=$(get_param host "$RESIDENT_ON_UUID" name-label); then
        (( ASSOC )) && VM_ASSOC=( "resident" )
    fi
    # check for affinity
    local AFFINITY_UUID=$(get_param vm "$VM_UUID" affinity)
    if [ "$AFFINITY_UUID" != "<not in database>" ] && \
        local AFFINITY_HOST=$(get_param host "$AFFINITY_UUID" name-label); then
        [ -z "$VM_HOST" ] && VM_HOST="$AFFINITY_HOST"
        if [ -n "$VM_HOST" ] && [ "$VM_HOST" == "$AFFINITY_HOST" ]; then
            (( ASSOC )) && VM_ASSOC=( ${VM_ASSOC[*]} "affinity" )
        fi
    fi
    # check for VDIs on local SR
    local VBD_UUIDS VBD_UUID
    get_uuids vbd "" vm-uuid "$VM_UUID"
    local VBD_UUIDS=( ${UUIDS[*]} )
    for VBD_UUID in ${VBD_UUIDS[@]}; do
        local VDI_UUID=$(get_param vbd "$VBD_UUID" vdi-uuid) || continue
        local SR_UUID=$(get_param vdi "$VDI_UUID" sr-uuid) || continue
        local SR_HOST=$(get_param sr "$SR_UUID" host) || continue
        if [ "$SR_HOST" != "<shared>" ]; then
            if [ -z "$VM_HOST" ]; then
                VM_HOST="$SR_HOST"
            fi
            if [ -n "$VM_HOST" ] && [ "$VM_HOST" == "$SR_HOST" ]; then
                (( ASSOC )) && VM_ASSOC=( ${VM_ASSOC[*]} "SR" )
                break
            fi
        fi
    done

    if [ -n "$VM_HOST" ]; then
        (( ASSOC )) && VM_HOST="$VM_HOST (${VM_ASSOC[*]})"
        return 0
    else
        return 1
    fi
}

# set values of parameters for UUID
# $1: object type
# $2: object UUID
# $3: name of parameter
# $...: key/value pairs of parameters
function set_params() {
    if [ $# -lt 4 ] || [ $(( $# % 2 )) -ne 0 ]; then
        return 2
    fi
    local OBJECT="$1" UUID="$2"
    shift 2
    local CMD="xe $OBJECT-param-set uuid=$UUID"
    local PARAM_NAME PARAM_VALUE
    while [ -n "$1" ]; do
        PARAM_NAME="$1"
        shift
        PARAM_VALUE="$1"
        shift
        CMD="$CMD $PARAM_NAME=\"$PARAM_VALUE\""
    done
    eval "$CMD"
    return $?
}

# set values of map param for UUID
# $1: object type
# $2: object UUID
# $3: name of map parameter
# $...: key/value pairs of map parameter
function set_map_keys() {
    if [ $# -lt 5 ] || [ $(( $# % 2 )) -ne 1 ]; then
        return 2
    fi
    local OBJECT="$1" UUID="$2" PARAM_NAME="$3"
    shift 3
    local MAP_KEY MAP_VALUE
    local CMD="xe $OBJECT-param-set uuid=$UUID"
    while [ -n "$1" ]; do
        MAP_KEY="$1"
        shift
        MAP_VALUE="$1"
        shift
        CMD="$CMD $PARAM_NAME:$MAP_KEY=$MAP_VALUE"
    done
    eval "$CMD"
    return $?
}

# remove keys from map param for UUID
# $1: object type
# $2: object UUID
# $3: name of map parameter
# $...: keys of map parameter
function remove_map_keys() {
    [ $# -lt 4 ] && return 2
    local OBJECT="$1" UUID="$2" PARAM_NAME="$3"
    shift 3
    local CMD="xe vm-param-remove uuid=$UUID param-name=$PARAM_NAME" MAP_KEY
    while [ -n "$1" ]; do
        MAP_KEY="$1"
        shift
        eval "$CMD param-key=$MAP_KEY" || return $?
    done
    return $?
}

# 
########################################################################
# 
# Functions for input validation
#

function valid_uuid() {
    [ -z "$1" ] && return 2
    echo "$1" | egrep -q '^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$'
}

function valid_integer() {
    [ -z "$1" ] && return 2
    echo "$1" | egrep -q '^[0-9]*$'
}

function valid_mac_address() {
    [ -z "$1" ] && return 2
    echo "$1" | egrep -q '([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}'
}

########################################################################
#
# Other functions
#

function prompt() {
    echo -e "$1 ${2-[y/N]?}: \c"
    local RESPONSE="n"
    read RESPONSE
    if echo "$RESPONSE" | egrep -q ' *[Yy] *'; then
        return 0
    else
        return 3
    fi
}

# check for non-empty variables named by arguments
function have_required() {
    [ -z "$1" ] && return 2
    for VAR_NAME in $*; do
        [ -z "${!VAR_NAME}" ] && return 1
    done
    return 0
}

# set all arguments to empty string
function initialize() {
    for VAR_NAME in $*; do
        eval "${VAR_NAME}"=""
    done
    return 0
}

# return capitalized label of object type if appropriate
function object_label() {
    [ $# -ne 1 ] && return 2
    local LABEL="$1"
    for TYPE in vm vif vbd vdi sr pbd pif; do
        [ "$1" == "$TYPE" ] && LABEL=$(echo "$1" | tr a-z A-Z) && break
    done
    echo "$LABEL"
    return 0
}
