#!/bin/bash

function usage() {
    cat <<EOF

Change name label of a VM and all of its non-read-only VDIs.

Usage: ${0##*/} -n NAME VM

-n    new name label
VM    name label of the VM
EOF
    exit 2
}

MYDIR=$(dirname $0)
XS_FUNCTIONS="$MYDIR/xs-functions"
if ! . "$XS_FUNCTIONS"; then
    echo "Error while sourcing $XS_FUNCTIONS."
    exit 1
fi

while getopts :n: OPT; do
    case $OPT in
        n)
            NAME_LABEL="$OPTARG"
            ;;
        *)
            usage
    esac
done
shift $(( OPTIND - 1 ))
VM="$1"
shift
[ -n "$1" ] && usage
have_required VM NAME_LABEL || usage
[ -z "$VM" ] || [ -z "$NAME_LABEL" ] && usage

VM_UUID=$(get_uuid vm "$VM") || exit 1
echo "VM UUID: $VM_UUID"
VBD_UUIDS=$(get_uuids vbd "" vm-uuid "$VM_UUID")
INDEX=0
initialize VDI_UUIDS
for VBD_UUID in $VBD_UUIDS; do
    echo "VBD UUID: $VBD_UUID"
    VDI_UUID=$(get_param vbd "$VBD_UUID" vdi-uuid) || exit 1
    [ "$VDI_UUID" == "<not in database>" ] && continue
    READ_ONLY=$(get_param vdi "$VDI_UUID" read-only) || exit 1
    [ "$READ_ONLY" == "true" ] && continue
    echo "VDI UUID: $VDI_UUID"
    VDI_UUIDS[$INDEX]="$VDI_UUID"
    (( INDEX++ ))
done

echo -e "Renaming VM...\c"
if set_params vm "$VM_UUID" name-label "$NAME_LABEL"; then
    echo "done."
else
    exit 1
fi
for VDI_UUID in ${VDI_UUIDS[@]}; do
    echo -e "Renaming VDI...\c"
    if set_params vdi "$VDI_UUID" name-label "$NAME_LABEL"; then
        echo "done."
    else
        exit 1
    fi
done
