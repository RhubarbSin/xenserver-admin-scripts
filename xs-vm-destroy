#!/bin/bash

function usage() {
    cat <<EOF

Destroy all VMs that have a matching name label.

Usage: ${0##*/} [-i] VM

-i    prompt before any destruction
VM    name label of the VM
EOF
    exit 2
}

function destroy() {
    [ -z "$1" ] && return 1
    local VM_UUID="$1"
    echo "VM UUID: $VM_UUID"
    if (( INTERACTIVE )); then
        prompt "Remove VM" || return 0
    fi
    echo -e "Getting power state of VM...\c"
    POWER_STATE=$(get_param vm "$VM_UUID" power-state) || return 1
    echo "$POWER_STATE."
    if [ "$POWER_STATE" != "halted" ]; then
        echo -e "Shutting down VM...\c"
        if ! xe vm-shutdown uuid="$VM_UUID" > /dev/null 2>&1; then
            xe vm-shutdown vm="$VM_UUID" --force
        fi
        xe event-wait class=vm power-state=halted uuid="$VM_UUID"
        echo "done."
    fi
    destroy_vdis "$VM_UUID"
    destroy_vm "$VM_UUID"
}

function destroy_vdis() {
    [ -z "$1" ] && return 1
    local VM_UUID="$1"
    get_uuids vbd "" vm-uuid "$VM_UUID"
    VBD_UUIDS=( ${UUIDS[*]} )
    local INDEX=0
    local VBD_UUID
    for VBD_UUID in ${VBD_UUIDS[@]}; do
        echo "VBD UUID: $VBD_UUID"
        VDI_UUID=$(get_param vbd "$VBD_UUID" vdi-uuid) || return 1
        [ "$VDI_UUID" == "<not in database>" ] && continue
        READ_ONLY=$(get_param vdi "$VDI_UUID" read-only) || return 1
        [ "$READ_ONLY" == "true" ] && continue
        echo "VDI UUID: $VDI_UUID"
        echo -e "Destroying VDI...\c"
        xe vdi-destroy uuid="$VDI_UUID" || return 1
        echo "done."
    done
}

function destroy_vm() {
    echo -e "Destroying VM...\c"
    xe vm-destroy uuid=$VM_UUID || return 1
    echo "done."
}

INTERACTIVE=0

while getopts :i OPT; do
    case $OPT in
        i)
            INTERACTIVE=1
            ;;
        *)
            usage
    esac
done
shift $(( OPTIND - 1 ))
[ -z "$1" ] || [ $# -gt 1 ] && usage
VM="$1"

MYDIR=$(dirname $0)
XS_FUNCTIONS="$MYDIR/xs-functions"
if ! . "$XS_FUNCTIONS"; then
    echo "Error while sourcing $XS_FUNCTIONS."
    exit 1
fi

get_uuids vm "$VM"
case $? in
    0)
        destroy "${UUIDS[0]}"
        ;;
    3)
        for VM_UUID in ${UUIDS[@]}; do
            destroy "$VM_UUID"
        done
        ;;
    *)
        exit $?
esac

exit 0
